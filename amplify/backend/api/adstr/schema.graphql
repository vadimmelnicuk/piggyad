type Profile
@model
@auth (rules: [
  {allow: owner, operations: [update]},
  {allow: private, operations: [read]}
])
@key (name: "getProfileByOwner", fields: ["owner"], queryField: "getProfileByOwner")
{
  id: ID!
  owner: String
  stream: Stream @connection
}

type Stream
@model
@auth (rules: [
  {allow: owner, operations: [create, update, delete]},
  {allow: private, operations: [read]},
  {allow: public, operations: [read]}
])
@key (name: "getStreamByOwner", fields: ["owner"], queryField: "getStreamByOwner")
@key (name: "getStreamByToken", fields: ["urlToken"], queryField: "getStreamByToken")
@key (name: "getStreamByStatus", fields: ["status"], queryField: "getStreamByStatus")
{
  id: ID!
  owner: String
  username: String
  platform: String
  status: StreamStatus
  urlToken: String
  verificationToken: String
  twitchStreamData: AWSJSON
  twitchUserData: AWSJSON
}

enum StreamStatus {
  UNVERIFIED
  OFFLINE
  ONLINE
}

type Advert
@model
@auth (rules: [
  {allow: owner, operations: [create, update, delete]},
  {allow: private, operations: [read]},
  {allow: public, operations: [read]}
])
@key (name: "getAdvertsByOwner", fields: ["owner"], queryField: "getAdvertsByOwner")
@key (name: "getAdvertByStatus", fields: ["status", "lastImpression"], queryField: "getAdvertByStatus")
{
  id: ID!
  owner: String
  title: String!
  type: String
  asset: S3Object
  status: AdvertStatus
  impressionsPerDay: Int
  impressions: [Impression] @connection(keyName: "getImpressionByAdvert", fields: ["id"])
  lastImpression: AWSDateTime
  duration: Int
  languages: AWSJSON
  categories: AWSJSON
}

enum AdvertStatus {
  DRAFT
  REVIEW
  ACTIVE
}

type AdvertJob
@model
@auth (rules: [
  {allow: private, operations: [read]},
  {allow: public, operations: [read]}
])
@key (name: "getAdvertJobByStreamer", fields: ["streamer", "createdAt"], queryField: "getAdvertJobByStreamer")
{
  id: ID!
  streamer: String!
  stream: Stream! @connection
  advert: Advert! @connection
  createdAt: AWSDateTime!
}

type Impression
@model
@auth (rules: [
  {allow: private, operations: [read]}
])
@key (name: "getImpressionByStreamer", fields: ["streamer", "createdAt"], queryField: "getImpressionByStreamer")
@key(name: "getImpressionByAdvert", fields: ["advertId"], queryField: "getImpressionByAdvert")
{
  id: ID!
  streamer: String!
  streamId: ID!
  advertId: ID!
  impressions: Int!
  createdAt: AWSDateTime!
}

type StreamSettings
@model
@auth (rules: [
  {allow: groups, groups: ["Admin"]},
  {allow: private, operations: [read]}
])
{
  id: ID!
  platforms: AWSJSON
  twitchLanguages: AWSJSON
  twitchTags: AWSJSON
}

type Inquiry
@model
@auth (rules: [
  {allow: groups, groups: ["Admin"]},
  {allow: private, operations: [create]},
  {allow: public, operations: [create]}
])
{
  id: ID!
  email: String!
  type: String!
}

type Secret
@model
@auth (rules: [
  {allow: groups, groups: ["Admin"]}
])
@key (name: "getSecretByName", fields: ["name"], queryField: "getSecretByName")
{
  id: ID!
  name: String!
  key: String
}

type Mutation {
  streamResolver(owner: String!): Stream
  @aws_api_key @aws_cognito_user_pools

  advertJobResolver(streamer: String!): AdvertJob
  @aws_api_key @aws_cognito_user_pools
}

type Subscription {
  onStreamResolverByOwner(owner: String!): Stream
  @aws_subscribe(mutations: ["streamResolver"])
  @aws_api_key @aws_cognito_user_pools

  onStreamByOwner(owner: String!): Stream
  @aws_subscribe(mutations: ["updateStream", "createStream", "deleteStream"])

  onUpdateAdvertByOwner(owner: String!): Advert
  @aws_subscribe(mutations: ["updateAdvert"])

  onAdvertJobResolverByStreamer(streamer: String!): AdvertJob
  @aws_subscribe(mutations: ["advertJobResolver"])
  @aws_api_key @aws_cognito_user_pools
}

type S3Object @aws_api_key @aws_cognito_user_pools
{
  key: String!
  identity: String!
}