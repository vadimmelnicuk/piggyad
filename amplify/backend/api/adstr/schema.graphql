type Note
@model
@auth (rules: [
  {allow: owner, operations: [create, update, delete]},
  {allow: private, operations: [read]},
  {allow: public, operations: [read]}
])
{
  id: ID!
  owner: String
  body: String!
}

type Profile
@model
@auth (rules: [
  {allow: owner, operations: [update]},
  {allow: private, operations: [read]}
])
@key (name: "getProfileByOwner", fields: ["owner"], queryField: "getProfileByOwner")
{
  id: ID!
  owner: String
  stream: Stream @connection
}

type Stream
@model
@auth (rules: [
  {allow: owner, operations: [create, update, delete]},
  {allow: private, operations: [read]},
  {allow: public, operations: [read]}
])
@key (name: "getStreamByOwner", fields: ["owner"], queryField: "getStreamByOwner")
@key (name: "getStreamByToken", fields: ["urlToken"], queryField: "getStreamByToken")
{
  id: ID!
  owner: String 
  username: String
  platform: String
  verified: Boolean
  online: Boolean 
  urlToken: String
  verificationToken: String
}

type Advert
@model
@auth (rules: [
  {allow: owner, operations: [create, update, delete]},
  {allow: private, operations: [read]},
  {allow: public, operations: [read]}
])
@key (name: "getAdvertsByOwner", fields: ["owner"], queryField: "getAdvertsByOwner")
{
  id: ID!
  owner: String
  title: String!
  type: String
  asset: S3Object
  status: AdvertStatus
  impressions: Int
  lastImpression: AWSDateTime
}

enum AdvertStatus {
  INACTIVE
  ACTIVE
}

type AdvertJob
@model
@auth (rules: [
  {allow: private, operations: [read]},
  {allow: public, operations: [read]}
])
{
  id: ID!
  streamer: String!
  stream: Stream! @connection
  advert: Advert! @connection
  completed: Boolean!
}

type Secret
@model
@auth (rules: [
  {allow: groups, groups: ["Admin"]}
])
@key (name: "getSecretByName", fields: ["name"], queryField: "getSecretByName")
{
  id: ID!
  name: String!
  key: String
}

type Mutation {
  streamResolver(id: ID!): Stream
  @aws_api_key @aws_cognito_user_pools
}

type Subscription {
  onStreamByIdResolver(id: ID!): Stream
  @aws_subscribe(mutations: ["streamResolver"])
  @aws_api_key @aws_cognito_user_pools

  onUpdateAdvertByOwner(owner: String!): Advert
  @aws_subscribe(mutations: ["updateAdvert"])

  onChangeNoteById: Note
  @aws_subscribe(mutations: ["createNote"])
  @aws_api_key @aws_cognito_user_pools
}

type S3Object @aws_api_key @aws_cognito_user_pools
{
  key: String!
  identity: String!
}
